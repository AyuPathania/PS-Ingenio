{"name": "Test New User Live Chat with Message Types", "status": "failed", "statusDetails": {"message": "AssertionError: Advisor element not found or not clickable: ‚ùå Element click intercepted: xpath = (//button[@class='searchButton--zl5Mn'])[1] - element click intercepted: Element <button type=\"button\" class=\"searchButton--zl5Mn\" data-testid=\"search-bar-button\">...</button> is not clickable at point (840, 399). Other element would receive the click: <div class=\"loaderConteiner--DoW_3\">...</div>\n  (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception", "trace": "self = <drivers.web_driver.WebDriver object at 0x106bbd970>, locator_type = 'xpath', locator_value = \"(//button[@class='searchButton--zl5Mn'])[1]\"\ntimeout = None\n\n    def click(self, locator_type, locator_value, timeout=None):\n        \"\"\"Click on element\"\"\"\n        try:\n            element = self.wait_for_element_clickable(locator_type, locator_value, timeout)\n            if element:\n>               element.click()\n\ndrivers/web_driver.py:556: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106bbd9a0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...tion [0x0x773c0fa9+1081]\\\\n\\\\tRtlSubscribeWnfStateChangeNotification [0x0x773c0f74+1028]\\\\n\\\\t(No symbol) [0x0]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"searchButton--zl5Mn\" data-testid=\"search-bar-button\">...</button> is not clickable at point (840, 399). Other element would receive the click: <div class=\"loaderConteiner--DoW_3\">...</div>\nE         (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x31ff53+65331]\nE       \tGetHandleVerifier [0x0x31ff94+65396]\nE       \t(No symbol) [0x0x113f63]\nE       \t(No symbol) [0x0x162ce0]\nE       \t(No symbol) [0x0x16109a]\nE       \t(No symbol) [0x0x15ebf2]\nE       \t(No symbol) [0x0x15dee1]\nE       \t(No symbol) [0x0x152645]\nE       \t(No symbol) [0x0x1814dc]\nE       \t(No symbol) [0x0x1520d4]\nE       \t(No symbol) [0x0x181754]\nE       \t(No symbol) [0x0x1a2bcb]\nE       \t(No symbol) [0x0x1812d6]\nE       \t(No symbol) [0x0x150910]\nE       \t(No symbol) [0x0x151784]\nE       \tGetHandleVerifier [0x0x563853+2439219]\nE       \tGetHandleVerifier [0x0x55ea82+2419298]\nE       \tGetHandleVerifier [0x0x3470ba+225434]\nE       \tGetHandleVerifier [0x0x336d98+159096]\nE       \tGetHandleVerifier [0x0x33dced+187597]\nE       \tGetHandleVerifier [0x0x327a68+96840]\nE       \tGetHandleVerifier [0x0x327bf2+97234]\nE       \tGetHandleVerifier [0x0x31270a+9962]\nE       \tBaseThreadInitThunk [0x0x765862c4+36]\nE       \tRtlSubscribeWnfStateChangeNotification [0x0x773c0fa9+1081]\nE       \tRtlSubscribeWnfStateChangeNotification [0x0x773c0f74+1028]\nE       \t(No symbol) [0x0]\n\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tc_01_new_user.TestAdvisorLogin object at 0x106af7b20>, web_user = <drivers.web_driver.WebDriver object at 0x106bbd970>\ntest_data = {'advisor': {'invalid_email': 'invalid@example.com', 'invalid_password': 'wrongpassword', 'messageadvisor': 'Hello, @S...alid@example.com', 'invalid_password': 'wrongpassword', 'messageuser': 'Hello,@Hubert. I need your advice 2day!', ...}}\n\n    @allure.title(\"Test New User Live Chat with Message Types\")\n    @allure.description(\"Test complete flow from signup to live chat with various message types\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_valid_login_web(self, web_user, test_data):\n        \"\"\"Test valid login on Web Advisor app using LambdaTest\"\"\"\n        #   advisor = web_advisor\n        user = web_user\n        user_web_locators = UserWebLocators()\n        advisor_web_locators = AdvisorWebLocators()\n        mixpanel_locators = MixPanelLocators()\n        signup = Signup()\n        login = Login()\n        send_message_in_live = SendMessage()\n        credit_card = CreditCard()\n        details_form = DetailsForm()\n        modules = Modules()\n    \n        with allure.step(\"Initialize test setup\"):\n            pass\n    \n        try:\n            with allure.step(\"Perform user signup\"):\n                modules.signup_with_user(user)\n    \n            # with allure.step(\"Login with advisor account\"):\n            #     modules.login_in_with_advisor(advisor, test_data)\n            #     time.sleep(10)\n    \n            with allure.step(\"Search and select advisor\"):\n                # add_credit_card details\n                try:\n                    user.wait_for_element_visible(*user_web_locators.FIND_ADVISOR)\n                    user.input_text(*user_web_locators.SEARCH_ADVISOR, \"tetsLanguageOrder\")\n>                   user.click(*user_web_locators.FIND_ADVISOR)\n\ntests/tc_01_new_user.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <drivers.web_driver.WebDriver object at 0x106bbd970>, locator_type = 'xpath', locator_value = \"(//button[@class='searchButton--zl5Mn'])[1]\"\ntimeout = None\n\n    def click(self, locator_type, locator_value, timeout=None):\n        \"\"\"Click on element\"\"\"\n        try:\n            element = self.wait_for_element_clickable(locator_type, locator_value, timeout)\n            if element:\n                element.click()\n                print(f\"‚úì Clicked element: {locator_type} = {locator_value}\")\n                return True\n            else:\n                error_msg = f\"‚ùå Element not clickable: {locator_type} = {locator_value}\"\n                print(error_msg)\n                raise ElementNotInteractableError(error_msg)\n        except TimeoutException:\n            error_msg = f\"‚ùå Element not clickable after timeout: {locator_type} = {locator_value}\"\n            print(error_msg)\n            raise ElementNotInteractableError(error_msg)\n        except ElementClickInterceptedException as e:\n            # Extract only the essential error message, remove stacktrace\n            error_details = str(e)\n            if \"Message:\" in error_details:\n                # Get only the message part before the stacktrace\n                message_part = error_details.split(\"Message:\")[1].split(\"Stacktrace:\")[0].strip()\n                clean_error = f\"‚ùå Element click intercepted: {locator_type} = {locator_value} - {message_part}\"\n            else:\n                clean_error = f\"‚ùå Element click intercepted: {locator_type} = {locator_value}\"\n            print(clean_error)\n>           raise ElementNotInteractableError(clean_error)\nE           drivers.web_driver.ElementNotInteractableError: ‚ùå Element click intercepted: xpath = (//button[@class='searchButton--zl5Mn'])[1] - element click intercepted: Element <button type=\"button\" class=\"searchButton--zl5Mn\" data-testid=\"search-bar-button\">...</button> is not clickable at point (840, 399). Other element would receive the click: <div class=\"loaderConteiner--DoW_3\">...</div>\nE             (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\n\ndrivers/web_driver.py:577: ElementNotInteractableError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tc_01_new_user.TestAdvisorLogin object at 0x106af7b20>, web_user = <drivers.web_driver.WebDriver object at 0x106bbd970>\ntest_data = {'advisor': {'invalid_email': 'invalid@example.com', 'invalid_password': 'wrongpassword', 'messageadvisor': 'Hello, @S...alid@example.com', 'invalid_password': 'wrongpassword', 'messageuser': 'Hello,@Hubert. I need your advice 2day!', ...}}\n\n    @allure.title(\"Test New User Live Chat with Message Types\")\n    @allure.description(\"Test complete flow from signup to live chat with various message types\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_valid_login_web(self, web_user, test_data):\n        \"\"\"Test valid login on Web Advisor app using LambdaTest\"\"\"\n        #   advisor = web_advisor\n        user = web_user\n        user_web_locators = UserWebLocators()\n        advisor_web_locators = AdvisorWebLocators()\n        mixpanel_locators = MixPanelLocators()\n        signup = Signup()\n        login = Login()\n        send_message_in_live = SendMessage()\n        credit_card = CreditCard()\n        details_form = DetailsForm()\n        modules = Modules()\n    \n        with allure.step(\"Initialize test setup\"):\n            pass\n    \n        try:\n            with allure.step(\"Perform user signup\"):\n                modules.signup_with_user(user)\n    \n            # with allure.step(\"Login with advisor account\"):\n            #     modules.login_in_with_advisor(advisor, test_data)\n            #     time.sleep(10)\n    \n            with allure.step(\"Search and select advisor\"):\n                # add_credit_card details\n                try:\n                    user.wait_for_element_visible(*user_web_locators.FIND_ADVISOR)\n                    user.input_text(*user_web_locators.SEARCH_ADVISOR, \"tetsLanguageOrder\")\n                    user.click(*user_web_locators.FIND_ADVISOR)\n                    formatted_locator = (user_web_locators.CLICK_ADVISOR[0],\n                            user_web_locators.CLICK_ADVISOR[1].format(advisor_name=\"tetsLanguageOrder\"))\n                    user.wait_for_element_visible(*formatted_locator)\n                    user.click(*formatted_locator)\n                except Exception as e:\n                    allure.attach(f\"Failed to find or click advisor element: {e}\", \"Error\", allure.attachment_type.TEXT)\n>                   raise AssertionError(f\"Advisor element not found or not clickable: {e}\")\nE                   AssertionError: Advisor element not found or not clickable: ‚ùå Element click intercepted: xpath = (//button[@class='searchButton--zl5Mn'])[1] - element click intercepted: Element <button type=\"button\" class=\"searchButton--zl5Mn\" data-testid=\"search-bar-button\">...</button> is not clickable at point (840, 399). Other element would receive the click: <div class=\"loaderConteiner--DoW_3\">...</div>\nE                     (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\n\ntests/tc_01_new_user.py:63: AssertionError"}, "description": "Test complete flow from signup to live chat with various message types", "steps": [{"name": "Initialize test setup", "status": "passed", "start": 1756106746896, "stop": 1756106746896}, {"name": "Perform user signup", "status": "passed", "start": 1756106746896, "stop": 1756106779058}, {"name": "Search and select advisor", "status": "failed", "statusDetails": {"message": "AssertionError: Advisor element not found or not clickable: ‚ùå Element click intercepted: xpath = (//button[@class='searchButton--zl5Mn'])[1] - element click intercepted: Element <button type=\"button\" class=\"searchButton--zl5Mn\" data-testid=\"search-bar-button\">...</button> is not clickable at point (840, 399). Other element would receive the click: <div class=\"loaderConteiner--DoW_3\">...</div>\n  (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\n", "trace": "  File \"/Users/ayushp/Client/Ingenio/tests/tc_01_new_user.py\", line 63, in test_valid_login_web\n    raise AssertionError(f\"Advisor element not found or not clickable: {e}\")\n"}, "attachments": [{"name": "Error", "source": "cf73d007-fc52-4869-b1e2-9bb59ae0812e-attachment.txt", "type": "text/plain"}], "start": 1756106779058, "stop": 1756106782661}, {"name": "Cleanup and driver quit", "status": "passed", "start": 1756106782673, "stop": 1756106782961}], "attachments": [{"name": "Error Details", "source": "229c47ec-3a4c-4ff5-ab82-4d2fc349416d-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "b7bb138d-06be-4df4-9cd1-3e11013f7139-attachment.txt", "type": "text/plain"}], "start": 1756106746895, "stop": 1756106782962, "uuid": "a2a2c6eb-71a5-4e2c-abb9-29a15f84d7a9", "historyId": "0ef9eaea0d99ca506d35c1bb0f4bc2d3", "testCaseId": "0ef9eaea0d99ca506d35c1bb0f4bc2d3", "fullName": "tests.tc_01_new_user.TestAdvisorLogin#test_valid_login_web", "labels": [{"name": "severity", "value": "critical"}, {"name": "epic", "value": "Ingenio Platform"}, {"name": "feature", "value": "Live Chat Functionality"}, {"name": "story", "value": "New User Live Chat Test"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "tc_01_new_user"}, {"name": "subSuite", "value": "TestAdvisorLogin"}, {"name": "host", "value": "admin-MacBook-Pro"}, {"name": "thread", "value": "85337-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.tc_01_new_user"}]}